// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  // id Marks this field as the Primary Key for the table.
  // @default(dbgenerated("gen_random_uuid()")) :  Sets the default value using PostgreSQL's built-in function gen_random_uuid(), 
  // meaning the database will generate a random UUID for each new row.
  // @db.Uuid	: Maps this field to the UUID type in PostgreSQL instead of a regular string.
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  // @unique(map: "product_slug_idx"):
  // Ensures that the slug value is unique across all rows in the table and explicitly 
  // names the unique constraint as "product_slug_idx".
  // The map: "product_slug_idx" assigns a custom name (product_slug_idx) to the unique constraint in PostgreSQL, 
  // which is useful for database migrations and indexing.
  slug        String   @unique(map: "product_slug_idx")
  category    String
  images      String[]
  brand       String
  description String
  stock       Int
  price       Decimal  @default(0) @db.Decimal(12, 2)
  rating      Decimal  @default(0) @db.Decimal(3, 2)
  numReviews  Int         @default(0)
  isFeatured  Boolean  @default(false)
  banner      String?

  // Relationships
  orderItem   OrderItem[]
  review      Review[]

  // @default(now()): Sets the default value to the current timestamp (now()) when a new record is inserted.
  // @db.Timestamp(6)	: Maps this field to PostgreSQL's TIMESTAMP(6) data type, allowing microsecond precision (6 decimal places).
  // Why Use @db.Timestamp(6)?
  //   Ensures high precision: The (6) means timestamps include microseconds (e.g., 2025-03-04 14:30:15.123456).
  // Better for logs & analytics: When tracking data changes, microsecond precision can be useful.
  createdAt DateTime @default(now()) @db.Timestamp(6)

  // @updatedAt : Automatically updates the timestamp to the current time whenever the record is modified.
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(6)


}




model User {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String          @default("NO_NAME")
  email         String          @unique(map: "user_email_idx")
  emailVerified DateTime?       @db.Timestamp(6)
  image         String?
  password      String?
  role          String          @default("user")
  address       Json?           @db.Json
  paymentMethod String?

  //  Relations
  account       Account[]
  session       Session[]
  cart          Cart[]
  Order         Order[]
  review        Review[]
 
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  
}



model Account {
  userId            String @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}



model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)
}


model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}




model Cart {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  // you can be a guest and add to your cart
  userId        String?  @db.Uuid
  sessionCartId String
  items         Json[]   @default([]) @db.Json
  itemsPrice    Decimal  @db.Decimal(12, 2)
  totalPrice    Decimal  @db.Decimal(12, 2)
  shippingPrice Decimal  @db.Decimal(12, 2)
  taxPrice      Decimal  @db.Decimal(12, 2)
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  // you can be a guest and add to your cart
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model Order {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String      @db.Uuid
  shippingAddress Json        @db.Json
  paymentMethod   String
  paymentResult   Json?       @db.Json
  itemsPrice      Decimal     @db.Decimal(12, 2)
  shippingPrice   Decimal     @db.Decimal(12, 2)
  taxPrice        Decimal     @db.Decimal(12, 2)
  totalPrice      Decimal     @db.Decimal(12, 2)
  isPaid          Boolean     @default(false)
  paidAt          DateTime?   @db.Timestamp(6)
  isDelivered     Boolean     @default(false)
  deliveredAt     DateTime?   @db.Timestamp(6)
  createdAt       DateTime    @default(now()) @db.Timestamp(6)
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems      OrderItem[]
}

model OrderItem {
  orderId   String  @db.Uuid
  productId String  @db.Uuid
  qty       Int
  price     Decimal @db.Decimal(12, 2)
  name      String
  slug      String
  image     String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([orderId, productId], map: "orderitems_orderId_productId_pk")
}





model Review {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId             String   @db.Uuid
  productId          String   @db.Uuid
  rating             Int
  title              String
  description        String
  isVerifiedPurchase Boolean  @default(true)
  createdAt          DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  // Relationships
  product            Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


















